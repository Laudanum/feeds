<?php

/**
 * @file
 * Schema definitions install/update/uninstall hooks.
 */

/**
  * Implement hook_uninstall()
  */
function feeds_uninstall() {
  variable_del('http_request_timeout');
}

/**
 * Implements hook_schema().
 */
function feeds_schema() {
  $schema = array();

  $schema['feeds_importer'] = array(
    'description' => 'Configuration of feeds objects.',
    'export' => array(
      'key' => 'id',
      'identifier' => 'feeds_importer',
      'default hook' => 'feeds_importer_default',  // Function hook name.
      'api' => array(
        'owner' => 'feeds',
        'api' => 'feeds_importer_default',  // Base name for api include files.
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'id' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Id of the fields object.',
      ),
      'config' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'Configuration of the feeds object.',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );
  $schema['feeds_feed'] = array(
    'description' => 'Source definitions for feeds.',
    'fields' => array(
      'fid' => array(
        'description' => 'The primary identifier for a feed.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uuid' => array(
        'description' => 'Unique Key: Universally unique identifier for this entity.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ),
      'importer' => array(
        'description' => 'The {feeds_importer}.id of this feed.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The title of this feed, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The {users}.uid that owns this feed; initially, this is the user that created it.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the feed is active.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the feed was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the feed was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'imported' => array(
        'description' => 'The Unix timestamp when the feed was most recently imported.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'config' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'Configuration of the source.',
        'serialize' => TRUE,
      ),
      'source' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Main source resource identifier. E. g. a path or a URL.',
      ),
      'state' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'State of import or clearing batches.',
        'serialize' => TRUE,
      ),
      'fetcher_result' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'Cache for fetcher result.',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('fid'),
    'indexes' => array(
      'id' => array('importer'),
      'id_source' => array('importer', array('source', 128)),
    ),
  );
  $schema['feeds_item'] = array(
    'description' => 'Tracks items such as nodes, terms, users.',
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type.',
      ),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The imported entity\'s serial id.',
      ),
      'fid' => array(
        'description' => 'The {feeds_feed}.fid this record belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'imported' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Import date of the feed item, as a Unix timestamp.',
      ),
      'url' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Link to the feed item.',
      ),
      'guid' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Unique identifier for the feed item.'
      ),
      'hash' => array(
        'type' => 'varchar',
        'length' => 32, // The length of an MD5 hash.
        'not null' => TRUE,
        'default' => '',
        'description' => 'The hash of the source item.',
      ),
    ),
    'primary key' => array('entity_type', 'entity_id'),
    'indexes' => array(
      'fid' => array('fid'),
      'lookup_url' => array('entity_type', 'fid', array('url', 128)),
      'lookup_guid' => array('entity_type', 'fid', array('guid', 128)),
      'global_lookup_url' => array('entity_type', array('url', 128)),
      'global_lookup_guid' => array('entity_type', array('guid', 128)),
      'imported' => array('imported'),
    ),
  );
  $schema['feeds_push_subscriptions'] = array(
    'description' => 'PubSubHubbub subscriptions.',
    'fields' => array(
      'domain' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Domain of the subscriber. Corresponds to an importer id.',
      ),
      'subscriber_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
        'description' => 'ID of the subscriber. Corresponds to a feed nid.',
      ),
      'timestamp' => array(
        'type' => 'int',
        'unsigned' => FALSE,
        'default' => 0,
        'not null' => TRUE,
        'description' => 'Created timestamp.',
      ),
      'hub' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'The URL of the hub endpoint of this subscription.',
      ),
      'topic' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'The topic URL (feed URL) of this subscription.',
      ),
      'secret' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Shared secret for message authentication.',
      ),
      'status' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Status of subscription.',
      ),
      'post_fields' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Fields posted.',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('domain', 'subscriber_id'),
    'indexes' => array(
      'timestamp' => array('timestamp'),
    ),
  );
  $schema['feeds_log'] = array(
    'description' => 'Table that contains logs of feeds events.',
    'fields' => array(
      'flid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique feeds event ID.',
      ),
      'fid' => array(
        'description' => 'The {feeds_feed}.fid this record belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'log_time' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unix timestamp of when event occurred.',
      ),
      'request_time' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unix timestamp of the request when the event occurred.',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Type of log message, for example "feeds_import"."',
      ),
      'message' => array(
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Text of log message to be passed into the t() function.',
      ),
      'variables' => array(
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Serialized array of variables that match the message string and that is passed into the t() function.',
      ),
      'severity' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The severity level of the event; ranges from 0 (Emergency) to 7 (Debug)',
      ),
    ),
    'primary key' => array('flid'),
    'indexes' => array(
      'fid' => array('fid'),
      'request_time' => array('request_time'),
      'log_time' => array('log_time'),
      'type' => array('type'),
    ),
  );

  return $schema;
}
