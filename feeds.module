<?php

/**
 * @file
 * Feeds - basic API functions and hook implementations.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\feeds\Entity\Importer;
use Drupal\feeds\FeedInterface;
use Drupal\feeds\StateInterface;
use GuzzleHttp\Exception\BadResponseException;
use GuzzleHttp\Exception\RequestException;
use Zend\Feed\Reader\Reader;

/**
 * Implements hook_help().
 */
function feeds_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/feeds':
      return '<p>' . t('Create one or more Feed importers for pulling content into Drupal.') . '</p>';
  }
}

/**
 * Implements hook_hook_info().
 */
function feeds_hook_info() {
  $hooks = array(
    'feeds_plugins',
    'feeds_after_parse',
    'feeds_before_import',
    'feeds_before_update',
    'feeds_presave',
    'feeds_after_save',
    'feeds_after_import',
    'feeds_after_clear',
    'feeds_processor_targets_alter',
    'feeds_parser_sources_alter',
  );

  return array_fill_keys($hooks, array('group' => 'feeds'));
}

/**
 * Entity URI callback.
 *
 * @param \Drupal\Core\Entity\EntityInterface $feeds_feed
 *   A feed entity.
 *
 * @return array
 *   An array with 'path' as the key and the path to the node as its value.
 */
function feeds_feed_uri(EntityInterface $feed) {
  return array(
    'path' => 'feed/' . $feed->id(),
  );
}

/**
 * Implements hook_cron().
 *
 * @todo This needs to be different, this could timeout easily. Perhaps a queue.
 */
function feeds_cron() {
  if ($importers = Importer::reschedule()) {
    $feed_controller = \Drupal::entityManager()->getStorage('feeds_feed');

    if ($importers === TRUE) {
      $feeds = $feed_controller->loadMultiple();
    }
    else {
      $feeds = $feed_controller->loadByProperties(array('importer' => $importers));
    }
    foreach ($feeds as $feed) {
      $feed->schedule();
    }
    Importer::reschedule(FALSE);
  }

  // Expire old log entries.
  db_delete('feeds_log')
    ->condition('request_time', REQUEST_TIME - 604800, '<')
    ->execute();
}

/**
 * Implements hook_queue_info().
 */
function feeds_queue_info() {
  return array(
    'feeds_push_unsubscribe' => array(
      'title' => t('Feeds push unsubscribe'),
      'worker callback' => 'feeds_push_unsubscribe',
      'cron' => array(
        'time' => 60,
      ),
    ),
    'feeds_push_subscribe' => array(
      'title' => t('Feeds push subscribe'),
      'worker callback' => 'feeds_push_subscribe',
      'cron' => array(
        'time' => 60,
      ),
    ),
    'feeds_feed_import' => array(
      'title' => t('Feed import'),
      'worker callback' => 'feeds_feed_import',
      'cron' => array(
        'time' => 60,
      ),
    ),
    'feeds_feed_expire' => array(
      'title' => t('Feed expire'),
      'worker callback' => 'feeds_feed_expire',
      'cron' => array(
        'time' => 60,
      ),
    ),
  );
}

/**
 * Implements hook_cron_job_scheduler_info().
 */
function feeds_cron_job_scheduler_info() {
  $info = array();
  $info['feeds_feed_import'] = array(
    'queue name' => 'feeds_feed_import',
  );
  $info['feeds_feed_expire'] = array(
    'queue name' => 'feeds_feed_expire',
  );
  return $info;
}

/**
 * Scheduler callback for importing from a source.
 */
function feeds_feed_import(array $job) {
  _feeds_job_scheduler_helper('import', $job);
}

/**
 * Scheduler callback for expiring content.
 */
function feeds_feed_expire(array $job) {
  _feeds_job_scheduler_helper('expire', $job);
}

/**
 * Executes a job_scheduler job.
 */
function _feeds_job_scheduler_helper($action, array $job) {
  $feed = \Drupal::entityManager()->getStorage('feeds_feed')->load($job['id']);

  if ($feed) {
    try {
      $feed->existing()->$action();
    }
    catch (FeedsNotExistingException $e) {
      // Do nothing.
    }
    catch (Exception $e) {
      $feed->log('import', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
    $method = 'schedule' . ucfirst($action);
    $feed->$method();
  }
}

/**
 * Scheduler callback for unsubscribing from PuSH hubs.
 *
 * @todo Perform actual unsubscribe.
 */
function feeds_push_unsubscribe(array $job) {
  $subscription = \Drupal::service('feeds.subscription.crud')->getSubscription($job['id']);

  // Do the unsubscribe dance.

  \Drupal::service('feeds.subscription.crud')->deleteSubscription($job['id']);
}

/**
 * Scheduler callback for subscribing from PuSH hubs.
 */
function feeds_push_subscribe($fid) {
  if (!$feed = entity_load('feeds_feed', $fid)) {
    return;
  }
  if (!$subscription = \Drupal::service('feeds.subscription.crud')->getSubscription($feed->id())) {
    return;
  }

  // @todo Error handling.
  $feed_string = \Drupal::httpClient()
    ->get($feed->getSource())
    ->getBody(TRUE);

  Reader::setExtensionManager(Drupal::service('feed.bridge.reader'));
  $channel = Reader::importString($feed_string);

  if (!$hubs = $channel->getHubs()) {
    return;
  }

  $subscription['hub'] = reset($hubs);
  $subscription['state'] = 'subscribe';
  \Drupal::service('feeds.subscription.crud')->setSubscription($subscription);

  try {
    \Drupal::httpClient()
      ->post($subscription['hub'])
      ->addPostFields(array(
        'hub.callback' => Url::createFromPath('feed/' . $feed->id() . '/push_callback')->setAbsolute()->toString(),
        'hub.callback' => 'http://twistor.me',
        'hub.mode' => $subscription['state'],
        'hub.topic' => $subscription['topic'],
        'hub.verify_token' => $subscription['token'],
        'hub.verify' => 'sync',
        'hub.lease_seconds' => '',
        'hub.secret' => $subscription['secret'],
      )
    );
  }
  catch (BadResponseException $e) {
    $response = $e->getResponse();
    watchdog('feeds', '%error', array('%error' => $response->getStatusCode() . ' ' . $response->getReasonPhrase()), WATCHDOG_WARNING);
  }
  catch (RequestException $e) {
    watchdog('feeds', '%error', array('%error' => $e->getMessage()), WATCHDOG_WARNING);
  }

  if ($response->getStatusCode() != 204 || $response->getStatusCode() != 202) {
    // There was an error, handle it.
  }
}

/**
 * Implements hook_theme().
 */
function feeds_theme() {
  return array(
    'feeds_feed_status' => array(
      'variables' => array(
        'progress_importing' => NULL,
        'progress_clearing' => NULL,
        'imported' => NULL,
        'count' => NULL,
      ),
      'file' => 'feeds.theme.inc',
    ),
    // 'feeds_feed' => array(
    //   'render element' => 'elements',
    //   'template' => 'feeds_feed',
    // ),
  );
}

/**
 * Implements hook_entity_bundle_info().
 */
function feeds_entity_bundle_info() {
  $bundles = array();
  foreach (\Drupal::configFactory()->listAll('feeds.importer.') as $config_name) {
    $config = \Drupal::config($config_name);
    $bundles['feeds_feed'][$config->get('id')]['label'] = $config->get('label');
  }
  return $bundles;
}

/**
 * Implements hook_file_download().
 *
 * @todo This doesn't handle duplicate sources.
 */
function feeds_file_download($uri) {
  $fids = \Drupal::entityQuery('feeds_feed')
    ->condition('source', $uri)
    ->range(0, 1)
    ->execute();

  if (!$fids) {
    // File is not associated with a feed.
    return;
  }

  // Get the file record based on the URI. If not in the database just return.
  $files = file_load_multiple(array(), array('uri' => $uri));
  foreach ($files as $item) {
    // Since some database servers sometimes use a case-insensitive comparison
    // by default, double check that the filename is an exact match.
    if ($file->getFileUri() === $uri) {
      $file = $item;
      break;
    }
  }
  if (!isset($file)) {
    return;
  }

  // Check if this file belongs to Feeds.
  $usage_list = file_usage()->listUsage($file);
  if (!isset($usage_list['feeds'])) {
    return;
  }

  $fid = reset($fids);

  $feed = \Drupal::entityManager()->getStorage('feeds_feed')->load($fid);
  if (!$feed || !$feed->access('import')) {
    // User does not have permission to import this feed.
    return -1;
  }

  // Return file headers.
  return file_get_content_headers($file);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove our field from the Field UI overview form.
 */
function feeds_form_field_ui_field_overview_form_alter(array &$form, FormStateInterface $form_state) {
  // if (in_array('feeds_item', $form['#fields'])) {

  //   unset($form['#fields'][array_search('feeds_item', $form['#fields'])]);
  //   unset($form['fields']['feeds_item']);

  //   $rows_order = $form['fields']['#regions']['content']['rows_order'];
  //   $key = array_search('feeds_item', $rows_order);
  //   unset($form['fields']['#regions']['content']['rows_order'][$key]);
  // }
}
