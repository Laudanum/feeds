<?php

/**
 * @file
 */

/**
 * Implements hook_help().
 */
function feeds_ui_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/feeds':
      $output = '<p>' . t('Create one or more Feed importers for pulling content into Drupal. You can use these importers from the <a href="@import">Import</a> page or - if you attach them to a content type - simply by creating a node from that content type.', array('@import' => url('import'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function feeds_ui_menu() {
  $items = array();
  $items['admin/structure/feeds'] = array(
    'title' => 'Feeds importers',
    'description' => 'Configure one or more Feeds importers to aggregate RSS and Atom feeds, import CSV files or more.',
    'route_name' => 'feeds_importer_list',
  );
  $items['admin/structure/feeds/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/feeds/add'] = array(
    'route_name' => 'feeds_importer_add',
    'type' => MENU_SIBLING_LOCAL_TASK,
  );
  $items['admin/structure/feeds/manage/%feeds_importer'] = array(
    'title callback' => 'feeds_importer_title',
    'title arguments' => array(4),
    'route_name' => 'feeds_importer',
  );
  $items['admin/structure/feeds/manage/%feeds_importer/%'] = array(
    'title callback' => 'feeds_importer_title',
    'title arguments' => array(4),
    'route_name' => 'feeds_importer_active',
  );
  $items['admin/structure/feeds/manage/%feeds_importer/%/%'] = array(
    'title callback' => 'feeds_importer_title',
    'title arguments' => array(4),
    'route_name' => 'feeds_importer_active_plugin',
  );
  $items['admin/structure/feeds/manage/%feeds_importer/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/structure/feeds/manage/%feeds_importer/delete'] = array(
    'title' => 'Delete',
    'route_name' => 'feeds_importer_delete',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_NONE,
    'weight' => 4,
  );

  return $items;
}

/**
 * Implements hook_local_actions().
 */
function feeds_ui_local_actions() {
  return array(
    array(
      'route_name' => 'feeds_importer_add',
      'title' => t('Add importer'),
      'appears_on' => array(
        'feeds_importer_list',
      ),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function feeds_ui_theme() {
  return array(
    'feeds_mapping_form' => array(
      'render element' => 'form',
      'file' => 'feeds_ui.theme.inc',
    ),
    'feeds_ui_edit_page' => array(
      'variables' => array('info' => NULL, 'active' => NULL),
      'file' => 'feeds_ui.theme.inc',
    ),
    'feeds_plugin_form' => array(
      'render element' => 'form',
      'file' => 'feeds_ui.theme.inc',
    ),
    'feeds_ui_container' => array(
      'variables' => array('container' => NULL),
      'file' => 'feeds_ui.theme.inc',
    ),
  );
}

/**
 * Introductory help for admin/structure/feeds/manage/%feeds_importer page
 */
function feeds_ui_edit_help() {
  return t('
    <p>
    You can create as many Feeds importer configurations as you would like to. Each can have a distinct purpose like letting your users aggregate RSS feeds or importing a CSV file for content migration. Here are a couple of things that are important to understand in order to get started with Feeds:
    </p>
    <ul>
    <li>
    Every importer configuration consists of basic settings, a fetcher, a parser and a processor and their settings.
    </li>
    <li>
    The <strong>basic settings</strong> define the general behavior of the importer. <strong>Fetchers</strong> are responsible for loading data, <strong>parsers</strong> for organizing it and <strong>processors</strong> for "doing stuff" with it, usually storing it.
    </li>
    <li>
    In Basic settings, you can <strong>attach an importer configuration to a content type</strong>. This is useful when many imports of a kind should be created, for example in an RSS aggregation scenario. If you don\'t attach a configuration to a content type, you can use it on the !import page.
    </li>
    <li>
    Imports can be <strong>scheduled periodically</strong> - see the periodic import select box in the Basic settings.
    </li>
    <li>
    Processors can have <strong>mappings</strong> in addition to settings. Mappings allow you to define what elements of a data feed should be mapped to what content fields on a granular level. For instance, you can specify that a feed item\'s author should be mapped to a node\'s body.
    </li>
    </ul>
    ', array('!import' => l(t('Import'), 'import')));
}

/**
 * Help text for mapping.
 */
function feeds_ui_mapping_help() {
  return t('
  <p>
  Define which elements of a single item of a feed (= <em>Sources</em>) map to which content pieces in Drupal (= <em>Targets</em>). Make sure that at least one definition has a <em>Unique target</em>. A unique target means that a value for a target can only occur once. E. g. only one item with the URL <em>http://example.com/content/1</em> can exist.
  </p>
  ');
}

/**
 * Submit callback for a per mapper configuration form. Switches between edit
 * and summary mode.
 */
function feeds_ui_mapping_form_multistep_submit($form, &$form_state) {
  $trigger = $form_state['triggering_element'];

  switch ($trigger['#op']) {
    case 'edit':
      $form_state['mapping_settings_edit'] = $trigger['#i'];
      break;

    case 'update':
      $values = $form_state['values']['config'][$trigger['#i']]['settings'];
      $form_state['mapping_settings'][$trigger['#i']] = $values;
      unset($form_state['mapping_settings_edit']);
      break;

    case 'cancel':
      unset($form_state['mapping_settings_edit']);
      break;
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * Walk the result of ParserBase::getMappingSources() or
 * ProcessorBase::getMappingTargets() and format them into
 * a Form API options array.
 */
function _feeds_ui_format_options($options) {
  $result = array();
  foreach ($options as $k => $v) {
    if (is_array($v) && !empty($v['name'])) {
      $result[$k] = $v['name'];
    }
    elseif (is_array($v)) {
      $result[$k] = $k;
    }
    else {
      $result[$k] = $v;
    }
  }
  asort($result);
  return $result;
}

/**
 * Per mapping settings summary callback. Shows whether a mapping is used as
 * unique or not.
 */
function feeds_ui_mapping_settings_optional_unique_summary($mapping, $target, $form, $form_state) {
  if (!empty($target['optional_unique'])) {
    if ($mapping['unique']) {
      return t('Used as <strong>unique</strong>.');
    }
    else {
      return t('Not used as unique.');
    }
  }
}
