<?php

/**
 * @file
 * Feeds - basic API functions and hook implementations.
 */

use Drupal\feeds\Plugin\FeedsPlugin;
use Drupal\feeds\Plugin\Core\Entity\Feed;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Template\Attribute;

// Common request time, use as point of reference and to avoid calls to time().
define('FEEDS_REQUEST_TIME', time());
// Do not schedule a feed for refresh.
define('FEEDS_SCHEDULE_NEVER', -1);
// Never expire feed items.
define('FEEDS_EXPIRE_NEVER', -1);

// Status of batched operations.
define('FEEDS_BATCH_COMPLETE', 1.0);
define('FEEDS_BATCH_ACTIVE', 0.0);

/**
 * Implements hook_help().
 */
function feeds_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/feeds':
      $output = '<p>' . t('Create one or more Feed importers for pulling content into Drupal. You can use these importers from the <a href="@import">Import</a> page or - if you attach them to a content type - simply by creating a node from that content type.', array('@import' => url('import'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_hook_info().
 */
function feeds_hook_info() {
  $hooks = array(
    'feeds_plugins',
    'feeds_after_parse',
    'feeds_before_import',
    'feeds_before_update',
    'feeds_presave',
    'feeds_after_save',
    'feeds_after_import',
    'feeds_after_clear',
    'feeds_processor_targets_alter',
    'feeds_parser_sources_alter',
  );

  return array_fill_keys($hooks, array('group' => 'feeds'));
}

/**
 * Implements hook_cron().
 */
function feeds_cron() {
  if ($importers = feeds_reschedule()) {
    if ($importers === TRUE) {
      $feeds = db_query("SELECT fid FROM {feeds_feed}");
    }
    else {
      $feeds = db_query("SELECT fid FROM {feeds_feed} WHERE importer IN (:ids)", array(':ids' => $importers));
    }
    foreach ($feeds as $feed) {
      entity_load('feeds_feed', $feed->fid)->schedule();
    }
    feeds_reschedule(FALSE);
  }

  // Expire old log entries.
  db_delete('feeds_log')
    ->condition('request_time', REQUEST_TIME - 604800, '<')
    ->execute();
}

/**
 * Implements hook_cron_job_scheduler_info().
 *
 * Compare queue names with key names in feeds_cron_queue_info().
 */
function feeds_cron_job_scheduler_info() {
  $info = array();
  $info['feeds_feed_import'] = array(
    'queue name' => 'feeds_feed_import',
  );
  $info['feeds_feed_clear'] = array(
    'queue name' => 'feeds_feed_clear',
  );
  $info['feeds_feed_expire'] = array(
    'queue name' => 'feeds_feed_expire',
  );
  $info['feeds_push_unsubscribe'] = array(
    'queue name' => 'feeds_push_unsubscribe',
  );
  return $info;
}

/**
 * Implements hook_queue_info().
 */
function feeds_queue_info() {
  return array(
    'feeds_feed_import' => array(
      'title' => t('Feeds source import'),
      'worker callback' => 'feeds_feed_import',
      'cron' => array(
        'time' => 60,
      ),
    ),
    'feeds_feed_clear' => array(
      'title' => t('Feeds source clear'),
      'worker callback' => 'feeds_feed_clear',
      'cron' => array(
        'time' => 60,
      ),
    ),
    'feeds_feed_expire' => array(
      'title' => t('Feeds source expire'),
      'worker callback' => 'feeds_feed_expire',
      'cron' => array(
        'time' => 60,
      ),
    ),
    'feeds_push_unsubscribe' => array(
      'title' => t('Feeds push unsubscribe'),
      'worker callback' => 'feeds_push_unsubscribe',
      'cron' => array(
        'time' => 60,
      ),
    ),
  );
}

/**
 * Scheduler callback for importing from a source.
 */
function feeds_feed_import($job) {
  $feed = entity_load('feeds_feed', $job['id']);
  try {
    $feed->existing()->import();
  }
  catch (FeedsNotExistingException $e) {
    // Do nothing.
  }
  catch (Exception $e) {
    $feed->log('import', $e->getMessage(), array(), WATCHDOG_ERROR);
  }
  $feed->scheduleImport();
}

/**
 * Scheduler callback for deleting all items from a source.
 */
function feeds_feed_clear($job) {
  $feed = entity_load('feeds_feed', $job['id']);
  try {
    $feed->existing()->clear();
  }
  catch (FeedsNotExistingException $e) {
    // Do nothing.
  }
  catch (Exception $e) {
    $feed->log('clear', $e->getMessage(), array(), WATCHDOG_ERROR);
  }
  $feed->scheduleClear();
}

/**
 * Scheduler callback for expiring content.
 */
function feeds_feed_expire($job) {
  $feed = entity_load('feeds_feed', $job['id']);
  try {
    $feed->existing()->expire();
  }
  catch (FeedsNotExistingException $e) {
    // Do nothing.
  }
  catch (Exception $e) {
    $feed->log('expire', $e->getMessage(), array(), WATCHDOG_ERROR);
  }
  $feed->scheduleExpire();
}

/**
 * Scheduler callback for unsubscribing from PuSH hubs.
 */
function feeds_push_unsubscribe($job) {
  $feed = entity_load('feeds_feed', $job['id']);
  $feed->getImporter()->fetcher->unsubscribe($feed);
}

/**
 * Batch API worker callback. Used by Feed::startBatchAPIJob().
 *
 * @see Feed::startBatchAPIJob().
 *
 * @todo Harmonize Job Scheduler API callbacks with Batch API callbacks?
 *
 * @param $method
 *   Method to execute on importer; one of 'import' or 'clear'.
 * @param $importer_id
 *   Identifier of a Drupal\feeds\Plugin\Core\Entity\Importer object.
 * @param $fid
 *   If importer is attached to content type, feed node id identifying the
 *   source to be imported.
 * @param $context
 *   Batch context.
 */
function feeds_batch($method, $fid, &$context) {
  $context['finished'] = FEEDS_BATCH_COMPLETE;
  try {
    $context['finished'] = entity_load('feeds_feed', $fid)->$method();
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Reschedule one or all importers.
 *
 * @param $importer_id
 *   If TRUE, all importers will be rescheduled, if FALSE, no importers will
 *   be rescheduled, if an importer id, only importer of that id will be
 *   rescheduled.
 *
 * @return
 *   TRUE if all importers need rescheduling. FALSE if no rescheduling is
 *   required. An array of importers that need rescheduling.
 */
function feeds_reschedule($importer_id = NULL) {
  $reschedule = Drupal::state()->get('feeds.reschedule') ?: FALSE;
  if ($importer_id === TRUE || $importer_id === FALSE) {
    $reschedule = $importer_id;
  }
  elseif (is_string($importer_id) && $reschedule !== TRUE) {
    $reschedule = is_array($reschedule) ? $reschedule : array();
    $reschedule[$importer_id] = $importer_id;
  }
  Drupal::state()->set('feeds.reschedule', $reschedule);
  if ($reschedule === TRUE) {
    return entity_load_multiple('feeds_importer');
  }
  return $reschedule;
}

/**
 * Implements feeds_permission().
 */
function feeds_permission() {
  $perms = array(
    'administer feeds' => array(
      'title' => t('Administer Feeds'),
      'description' => t('Create, update, delete importers, execute import and delete tasks on any importer.')
    ),
  );
  foreach (entity_load_multiple('feeds_importer') as $importer) {
    $perms["view {$importer->id()} feeds"] = array(
      'title' => t('View @name feeds', array('@name' => $importer->label())),
    );
    $perms["add {$importer->id()} feeds"] = array(
      'title' => t('Add @name feeds', array('@name' => $importer->label())),
    );
    $perms["edit {$importer->id()} feeds"] = array(
      'title' => t('Edit @name feeds', array('@name' => $importer->label())),
    );
    $perms["delete {$importer->id()} feeds"] = array(
      'title' => t('Delete @name feeds', array('@name' => $importer->label())),
    );
    $perms["import {$importer->id()} feeds"] = array(
      'title' => t('Import @name feeds', array('@name' => $importer->label())),
    );
    $perms["clear {$importer->id()} feeds"] = array(
      'title' => t('Delete items from @name feeds', array('@name' => $importer->label())),
    );
    $perms["unlock {$importer->id()} feeds"] = array(
      'title' => t('Unlock imports from @name feeds', array('@name' => $importer->label())),
      'description' => t('If a feed importation breaks for some reason, users with this permission can unlock it .')
    );
  }
  return $perms;
}

/**
 * Implements hook_forms().
 *
 * Declare form callbacks for Importer and plugin classes.
 */
function feeds_forms() {
  $forms = array();
  $forms['Drupal\feeds\Plugin\Core\Entity\Importer_feeds_form']['callback'] = 'feeds_form';

  foreach (array('fetcher', 'parser', 'processor') as $type) {
    $definitions = \Drupal::service('plugin.manager.feeds.' . $type)->getDefinitions();
    foreach ($definitions as $definition) {
      $forms[$definition['class'] . '_feeds_form']['callback'] = 'feeds_form';
    }
  }

  return $forms;
}

/**
 * Implements hook_menu().
 */
function feeds_menu() {
  $items = array();
  $items['admin/content/feed'] = array(
    'title' => 'Feeds',
    'description' => 'Manage the feeds defined for your site.',
    'route_name' => 'feeds_feed_list',
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
  );
  $items['feed/add'] = array(
    'title' => 'Add feed',
    'route_name' => 'feeds_feed_add_list',
  );
  $items['feed/add/%feeds_importer'] = array(
    'title' => 'Add feed',
    'route_name' => 'feeds_feed_add',
  );
  $items['feed/%feeds_feed'] = array(
    'title callback' => 'feeds_feed_title',
    'title arguments' => array(1),
    'route_name' => 'feeds_feed',
  );
  $items['feed/%feeds_feed/view'] = array(
    'title' => 'View',
    'route_name' => 'feeds_feed_view',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['feed/%feeds_feed/edit'] = array(
    'title' => 'Edit',
    'route_name' => 'feeds_feed_edit',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['feed/%feeds_feed/delete'] = array(
    'title' => 'Delete',
    'route_name' => 'feeds_feed_delete',
    'type' => MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE,
  );
  $items['feed/%feeds_feed/import'] = array(
    'title' => 'Import',
    'route_name' => 'feeds_feed_import',
    'type' => MENU_SIBLING_LOCAL_TASK,
    'weight' => 10,
  );
  $items['feed/%feeds_feed/delete-items'] = array(
    'title' => 'Delete items',
    'route_name' => 'feeds_feed_delete_items',
    'type' => MENU_SIBLING_LOCAL_TASK,
    'weight' => 11,
  );
  $items['feed/%feeds_feed/unlock'] = array(
    'title' => 'unlock',
    'route_name' => 'feeds_feed_unlock',
    'type' => MENU_SIBLING_LOCAL_TASK,
    'weight' => 11,
  );

  // Admin UI.
  $items['admin/structure/feeds'] = array(
    'title' => 'Feeds importers',
    'description' => 'Configure one or more Feeds importers to aggregate RSS and Atom feeds, import CSV files or more.',
    'route_name' => 'feeds_importer_list',
  );
  $items['admin/structure/feeds/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/feeds/add'] = array(
    'route_name' => 'feeds_importer_add',
    'type' => MENU_SIBLING_LOCAL_TASK,
  );
  $items['admin/structure/feeds/manage/%feeds_importer'] = array(
    'title callback' => 'feeds_importer_title',
    'title arguments' => array(4),
    'route_name' => 'feeds_importer',
  );
  $items['admin/structure/feeds/manage/%feeds_importer/%'] = array(
    'title callback' => 'feeds_importer_title',
    'title arguments' => array(4),
    'route_name' => 'feeds_importer_active',
  );
  $items['admin/structure/feeds/manage/%feeds_importer/%/%'] = array(
    'title callback' => 'feeds_importer_title',
    'title arguments' => array(4),
    'route_name' => 'feeds_importer_active_plugin',
  );
  $items['admin/structure/feeds/manage/%feeds_importer/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/structure/feeds/manage/%feeds_importer/delete'] = array(
    'title' => 'Delete',
    'route_name' => 'feeds_importer_delete',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_NONE,
    'weight' => 4,
  );

  return $items;
}

/**
 * Implements hook_local_actions().
 */
function feeds_local_actions() {
  return array(
    array(
      'route_name' => 'feeds_feed_import',
      'title' => t('Import'),
      'appears_on' => array(
        'feeds_feed_view',
      ),
    ),
    array(
      'route_name' => 'feeds_feed_delete_items',
      'title' => t('Delete items'),
      'appears_on' => array(
        'feeds_feed_view',
      ),
    ),
    array(
      'route_name' => 'feeds_feed_unlock',
      'title' => t('Unlock'),
      'appears_on' => array(
        'feeds_feed_view',
      ),
    ),
    array(
      'route_name' => 'feeds_importer_add',
      'title' => t('Add importer'),
      'appears_on' => array(
        'feeds_importer_list',
      ),
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function feeds_admin_paths() {
  return array(
    'feed/*/edit' => TRUE,
    'feed/*/delete' => TRUE,
    'feed/*/import' => TRUE,
    'feed/*/unlock' => TRUE,
    'feed/*/delete-items' => TRUE,
    'feed/add' => TRUE,
    'feed/add/*' => TRUE,
  );
}

/**
 * Title callback.
 */
function feeds_importer_title($importer_id) {
  if ($importer = entity_load('feeds_importer', $importer_id)) {
    return $importer->label();
  }
}

/**
 * Feed title callback.
 */
function feeds_feed_title($feed_id) {
  if ($feed = entity_load('feeds_feed', $feed_id)) {
    return $feed->label();
  }
}

/**
 * Implements hook_menu_local_tasks().
 */
function feeds_menu_local_tasks(&$data, $router_item, $root_path) {
  // Add action link to 'feeds/add' on 'admin/content/feed' page.
  if ($root_path == 'admin/content/feed') {
    $item = menu_get_item('feed/add');
    if ($item['access']) {
      $data['actions'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_theme().
 */
function feeds_theme() {
  return array(
    'feeds_upload' => array(
      'render element' => 'element',
    ),
    'feeds_feed_status' => array(
      'variables' => array(
        'progress_importing' => NULL,
        'progress_clearing' => NULL,
        'imported' => NULL,
        'count' => NULL,
      ),
    ),
    'feeds_mapping_form' => array(
      'render element' => 'form',
      'file' => 'feeds.theme.inc',
    ),
    'feeds_edit_page' => array(
      'variables' => array('info' => NULL, 'active' => NULL),
      'file' => 'feeds.theme.inc',
    ),
    'feeds_plugin_form' => array(
      'render element' => 'form',
      'file' => 'feeds.theme.inc',
    ),
    'feeds_container' => array(
      'variables' => array('container' => NULL),
      'file' => 'feeds.theme.inc',
    ),
  );
}

/**
 * Menu access callback.
 *
 * @param $action
 *   The action to be performed. Possible values are:
 *   - import
 *   - clear
 *   - unlock
 * @param $param
 *   Node object or Drupal\feeds\Plugin\Core\Entity\Importer id.
 */
function feeds_access($action, $param) {
  if (!in_array($action, array('view', 'edit','delete', 'import', 'clear', 'unlock'))) {
    // If $action is not one of the supported actions, we return access denied.
    return FALSE;
  }

  if (is_string($param)) {
    $importer_id = $param;
  }
  elseif ($param->id()) {
    $importer_id = $param->id();
  }

  // Check for permissions if feed id is present, otherwise return FALSE.
  if ($importer_id) {
    if (user_access('administer feeds') || user_access("{$action} {$importer_id} feeds")) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_exit().
 */
function feeds_exit() {
  // Process any pending PuSH subscriptions.
  $jobs = feeds_get_subscription_jobs();
  foreach ($jobs as $job) {
    if (!isset($job['fetcher']) || !isset($job['source'])) {
      continue;
     }
    $job['fetcher']->subscribe($job['source']);
  }

  if (drupal_static('feeds_log_error', FALSE)) {
    watchdog('feeds', 'Feeds reported errors, visit the Feeds log for details.', array(), WATCHDOG_ERROR, 'admin/reports/dblog/feeds');
  }
}

/**
 * Implements hook_views_api().
 */
function feeds_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'feeds') . '/views',
  );
}

/**
 * Implements hook_entity_insert().
 */
function feeds_entity_insert($entity) {
  feeds_item_info_insert($entity, $entity->id());
}

/**
 * Implements hook_entity_update().
 */
function feeds_entity_update($entity) {
  feeds_item_info_save($entity, $entity->id());
}

/**
 * Implements hook_entity_delete().
 */
function feeds_entity_delete($entity) {
  // // Delete any imported items produced by the source.
  db_delete('feeds_item')
    ->condition('entity_type', $entity->entityType())
    ->condition('entity_id', $entity->id())
    ->execute();
}

/**
 * Logs to a file like /tmp/feeds_my_domain_org.log in temporary directory.
 */
function feeds_dbg($msg) {
  if (variable_get('feeds_debug', FALSE)) {
    if (!is_string($msg)) {
      $msg = var_export($msg, TRUE);
    }
    $filename = trim(str_replace('/', '_', $_SERVER['HTTP_HOST'] . base_path()), '_');
    $handle = fopen("temporary://feeds_$filename.log", 'a');
    fwrite($handle, gmdate('c') . "\t$msg\n");
    fclose($handle);
  }
}

/**
 * Writes to feeds log.
 */
function feeds_log($feed, $type, $message, $variables = array(), $severity = WATCHDOG_NOTICE) {
  if ($severity < WATCHDOG_NOTICE) {
    $error = &drupal_static('feeds_log_error', FALSE);
    $error = TRUE;
  }
  db_insert('feeds_log')
    ->fields(array(
      'fid' => $feed->id(),
      'log_time' => time(),
      'request_time' => REQUEST_TIME,
      'type' => $type,
      'message' => $message,
      'variables' => serialize($variables),
      'severity' => $severity,
    ))
    ->execute();
}

/**
 * Loads an item info object.
 *
 * Example usage:
 *
 * $info = feeds_item_info_load('node', $node->nid);
 */
function feeds_item_info_load($entity_type, $entity_id) {
  return db_select('feeds_item')
    ->fields('feeds_item')
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->execute()
    ->fetchObject();
}

/**
 * Inserts an item info object into the feeds_item table.
 */
function feeds_item_info_insert($entity, $entity_id) {
  if (isset($entity->feeds_item)) {
    $entity->feeds_item->entity_id = $entity_id;
    drupal_write_record('feeds_item', $entity->feeds_item);
  }
}

/**
 * Inserts or updates an item info object in the feeds_item table.
 */
function feeds_item_info_save($entity, $entity_id) {
  if (isset($entity->feeds_item)) {
    $entity->feeds_item->entity_id = $entity_id;
    if (feeds_item_info_load($entity->feeds_item->entity_type, $entity_id)) {
      drupal_write_record('feeds_item', $entity->feeds_item, array('entity_type', 'entity_id'));
    }
    else {
      feeds_item_info_insert($entity, $entity_id);
    }
  }
}

/**
 * Includes a library file.
 *
 * @param $file
 *   The filename to load from.
 * @param $library
 *   The name of the library. If libraries module is installed,
 *   feeds_include_library() will look for libraries with this name managed by
 *   libraries module.
 */
function feeds_include_library($file, $library) {
  static $included = array();

  if (!isset($included[$file])) {

    $library_dir = variable_get('feeds_library_dir', FALSE);
    $feeds_library_path = DRUPAL_ROOT . '/' . drupal_get_path('module', 'feeds') . "/libraries/$file";

    // Try first whether libraries module is present and load the file from
    // there. If this fails, require the library from the local path.
    if (module_exists('libraries') && file_exists(libraries_get_path($library) . "/$file")) {
      require libraries_get_path($library) . "/$file";
      $included[$file] = TRUE;
    }
    elseif ($library_dir && file_exists("$library_dir/$library/$file")) {
      require "$library_dir/$library/$file";
      $included[$file] = TRUE;
    }
    elseif (file_exists($feeds_library_path)) {
      // @todo: Throws "Deprecated function: Assigning the return value of new
      // by reference is deprecated."
      require $feeds_library_path;
      $included[$file] = TRUE;
    }
  }

  if (isset($included[$file])) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Checks whether a library is present.
 *
 * @param $file
 *   The filename to load from.
 * @param $library
 *   The name of the library. If libraries module is installed,
 *   feeds_library_exists() will look for libraries with this name managed by
 *   libraries module.
 */
function feeds_library_exists($file, $library) {

  if (module_exists('libraries') && file_exists(libraries_get_path($library) . "/$file")) {
    return TRUE;
  }

  elseif (file_exists(DRUPAL_ROOT . '/' . drupal_get_path('module', 'feeds') . "/libraries/$file")) {
    return TRUE;
  }

  elseif ($library_dir = variable_get('feeds_library_dir', FALSE)) {
    if (file_exists("$library_dir/$library/$file")) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Copy of valid_url() that supports the webcal scheme.
 *
 * @see valid_url().
 *
 * @todo Replace with valid_url() when http://drupal.org/node/295021 is fixed.
 */
function feeds_valid_url($url, $absolute = FALSE) {
  if ($absolute) {
    return (bool) preg_match("
      /^                                                      # Start at the beginning of the text
      (?:ftp|https?|feed|webcal):\/\/                         # Look for ftp, http, https, feed or webcal schemes
      (?:                                                     # Userinfo (optional) which is typically
        (?:(?:[\w\.\-\+!$&'\(\)*\+,;=]|%[0-9a-f]{2})+:)*      # a username or a username and password
        (?:[\w\.\-\+%!$&'\(\)*\+,;=]|%[0-9a-f]{2})+@          # combination
      )?
      (?:
        (?:[a-z0-9\-\.]|%[0-9a-f]{2})+                        # A domain name or a IPv4 address
        |(?:\[(?:[0-9a-f]{0,4}:)*(?:[0-9a-f]{0,4})\])         # or a well formed IPv6 address
      )
      (?::[0-9]+)?                                            # Server port number (optional)
      (?:[\/|\?]
        (?:[|\w#!:\.\?\+=&@$'~*,;\/\(\)\[\]\-]|%[0-9a-f]{2})   # The path and query (optional)
      *)?
    $/xi", $url);
  }
  else {
    return (bool) preg_match("/^(?:[\w#!:\.\?\+=&@$'~*,;\/\(\)\[\]\-]|%[0-9a-f]{2})+$/i", $url);
  }
}

/**
 * Registers a feed subscription job for execution on feeds_exit().
 *
 * @param array $job
 *   Information about a new job to queue; or if set to NULL (default), leaves
 *   the current queued jobs unchanged.
 *
 * @return
 *   An array of subscribe jobs to process.
 *
 * @see feeds_exit()
 * @see feeds_get_subscription_jobs()
 */
function feeds_set_subscription_job(array $job = NULL) {
  $jobs = &drupal_static(__FUNCTION__, array());
  if (isset($job)) {
    $jobs[] = $job;
  }
  return $jobs;
}

/**
 * Returns the list of queued jobs to be run.
 *
 * @return
 *   An array of subscribe jobs to process.
 *
 * @see feeds_set_subscription_job()
 */
function feeds_get_subscription_jobs() {
  return feeds_set_subscription_job();
}

/**
 * Implements hook_file_download().
 */
function feeds_file_download($uri) {
  $id = db_query("SELECT id FROM {feeds_feed} WHERE source = :uri", array(':uri' => $uri))->fetchField();

  if (!$id) {
    // File is not associated with a feed.
    return;
  }

   // Get the file record based on the URI. If not in the database just return.
  $files = file_load_multiple(array(), array('uri' => $uri));
  foreach ($files as $item) {
    // Since some database servers sometimes use a case-insensitive comparison
    // by default, double check that the filename is an exact match.
    if ($file->getFileUri() === $uri) {
      $file = $item;
      break;
    }
  }
  if (!isset($file)) {
    return;
  }

  // Check if this file belongs to Feeds.
  $usage_list = file_usage()->listUsage($file);
  if (!isset($usage_list['feeds'])) {
    return;
  }

  if (!feeds_access('import', $id)) {
    // User does not have permission to import this feed.
    return -1;
  }

  // Return file headers.
  return file_get_content_headers($file);
}

/**
 * Feeds API version.
 */
function feeds_api_version() {
  $version = feeds_ctools_plugin_api('feeds', 'plugins');
  return $version['version'];
}

/**
 * Converts to UNIX time.
 *
 * @param $date
 *   A date that is either a string, a DrupalDateTime or a UNIX timestamp.
 * @param $default_value
 *   A default UNIX timestamp to return if $date could not be parsed.
 *
 * @return
 *   $date as UNIX time if conversion was successful, $dfeault_value otherwise.
 */
function feeds_to_unixtime($date, $default_value) {
  if (is_numeric($date)) {
    return $date;
  }
  elseif (is_string($date) && !empty($date)) {
    $date = new DrupalDateTime($date);
    return $date->format('U');
  }
  elseif ($date instanceof DrupalDateTime) {
    return $date->format('U');
  }
  return $default_value;
}

/**
 * Config form wrapper. Use to render the configuration form of a plugin.
 *
 * @param $configurable
 *   FeedsPlugin object.
 * @param $form_method
 *   The form method that should be rendered.
 *
 * @return
 *   Config form array if available. NULL otherwise.
 */
function feeds_get_form($configurable, $form_method) {
  if (method_exists($configurable, $form_method)) {
    return drupal_get_form(get_class($configurable) . '_feeds_form', $configurable, $form_method);
  }
}

/**
 * Config form callback. Don't call directly, but use
 * feeds_get_form($configurable, 'method') instead.
 *
 * @param
 *   FormAPI $form_state.
 * @param
 *   FeedsPlugin object.
 * @param
 *   The object to perform the save() operation on.
 * @param $form_method
 *   The $form_method that should be rendered.
 */
function feeds_form($form, &$form_state, $configurable, $form_method) {
  $form = $configurable->$form_method($form_state);
  $form['#configurable'] = $configurable;
  $form['#feeds_form_method'] = $form_method;
  $form['#validate'] = array('feeds_form_validate');
  $form['#submit'] = array('feeds_form_submit');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  return $form;
}

/**
 * Validation handler for feeds_form().
 */
function feeds_form_validate($form, &$form_state) {
  _feeds_form_helper($form, $form_state, 'Validate');
}

/**
 * Submit handler for feeds_form().
 */
function feeds_form_submit($form, &$form_state) {
  _feeds_form_helper($form, $form_state, 'Submit');
}

/**
 * Helper for Feeds validate and submit callbacks.
 *
 * @todo This is all terrible. Remove.
 */
function _feeds_form_helper($form, &$form_state, $action) {
  $method = $form['#feeds_form_method'] . $action;
  if (method_exists($form['#configurable'], $method)) {
    $form['#configurable']->$method($form_state['values']);
  }
}

/**
 * Helper, see FeedsDataProcessor class.
 */
function feeds_format_expire($timestamp) {
  if ($timestamp == FEEDS_EXPIRE_NEVER) {
    return t('Never');
  }
  return t('after !time', array('!time' => format_interval($timestamp)));
}

/**
 * Implements hook_data_type_info().
 */
function feeds_data_type_info() {
  $info['feeds_serialized_field'] = array(
    'label' => t('Serialized field item'),
    'description' => t('An entity field containing a serialized blob.'),
    'class' => '\Drupal\feeds\Type\SerializedItem',
    'list class' => '\Drupal\Core\Entity\Field\Type\Field',
  );
  return $info;
}

/**
 * Implements hook_entity_bundle_info().
 */
function feeds_entity_bundle_info() {
  $bundles = array();
  foreach (config_get_storage_names_with_prefix('feeds.importer.') as $config_name) {
    $config = config($config_name);
    $bundles['feeds_feed'][$config->get('id')]['label'] = $config->get('name');
  }
  return $bundles;
}

/**
 * Theme functions.
 * @todo remove these.
 */

/**
 * Themes a status display for a source.
 */
function theme_feeds_feed_status($v) {
  $output = '<div class="info-box feeds-source-status">';
  $items = array();
  if ($v['progress_importing']) {
    $progress = number_format(100.0 * $v['progress_importing'], 0);
    $items[] = t('Importing - @progress % complete.', array('@progress' => $progress));
  }
  if ($v['progress_clearing']) {
    $progress = number_format(100.0 * $v['progress_clearing'], 0);
    $items[] = t('Deleting items - @progress % complete.', array('@progress' => $progress));
  }
  if (!count($items)) {
    if ($v['count']) {
      if ($v['imported']) {
        $items[] = t('Last import: @ago ago.', array('@ago' => format_interval(REQUEST_TIME - $v['imported'], 1)));
      }
      $items[] = t('@count imported items total.', array('@count' => $v['count']));
    }
    else {
      $items[] = t('No imported items.');
    }
  }
  $output .= theme('item_list', array('items' => $items));
  $output .= '</div>';
  return $output;
}

/**
 * Theme upload widget.
 */
function theme_feeds_upload($variables) {
  $element = $variables['element'];
  drupal_add_css(drupal_get_path('module', 'feeds') . '/feeds.css');
  _form_set_attributes($element, array('form-file'));
  $description = '';
  if (!empty($element['#file_info'])) {
    $file = $element['#file_info'];
    $wrapper = file_stream_wrapper_get_instance_by_uri($file->getFileUri());
    $description .= '<div class="file-info">';
    $description .= '<div class="file-name">';
    if ($wrapper) {
      $description .= l($file->getFilename(), $wrapper->getExternalUrl());
    }
    else {
      $description .= t('URI scheme %scheme not available.', array('%scheme' =>  file_uri_scheme($file->getFileUri())));
    }
    $description .= '</div>';
    $description .= '<div class="file-size">';
    $description .= format_size($file->getSize());
    $description .= '</div>';
    $description .= '<div class="file-mime">';
    $description .= check_plain($file->getMimeType());
    $description .= '</div>';
    $description .= '</div>';
  }
  $description .= '<div class="file-upload">';
  $description .= '<input type="file" name="' . $element['#name'] . '"' . ($element['#attributes'] ? ' ' . new Attribute($element['#attributes']) : '') . ' id="' . $element['#id'] . '" size="' . $element['#size'] . "\" />\n";
  $description .= '</div>';
  $element['#description'] = $description;

  // For some reason not unsetting #title leads to printing the title twice.
  unset($element['#title']);
  return theme('form_element', $element);
}

/**
 * Handle a fetcher callback.
 */
function feeds_fetcher_callback($importer, $fid = 0) {
  if ($importer instanceof Importer) {
    try {
      return $importer->fetcher->request($fid);
    }
    catch (Exception $e) {
      // Do nothing.
    }
  }
  drupal_access_denied();
}
